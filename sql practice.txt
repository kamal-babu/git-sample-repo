sql practice:

movie rating

# Write your MySQL query statement below
(select name as results from users u join movierating m on u.user_id = m.user_id group by name
order by count(rating) desc,1 limit 1)
union all
(select title as results from movies m1 join movierating a on m1.movie_id=a.movie_id 
where date_format(created_at,'%Y-%m')='2020-02' group by m1.movie_id order by avg(rating) desc,1 limit 1);

==================================================================================
exchange seats:

# Write your MySQL query statement below
select
case when mod(id,2)=0 then id-1
when mod(id,2)=1 and id+1 not in (select id from seat) then id
else id+1 end as id,
student
from seat order by id
==================================================================================
Manager atlest 5 direct reporties
# Write your MySQL query statement below
select name from employee where id in(
select managerId from employee group by managerId having count(id) >=5
)

==================================================================================
confirmation rate:
# Write your MySQL query statement below
SELECT a.user_id, round(ifnull(avg(action = 'confirmed'), 0),2) as confirmation_rate
FROM Signups a
LEFT JOIN Confirmations b
ON a.user_id = b.user_id
GROUP BY a.user_id
==================================================================================
Monthly transactions
# Write your MySQL query statement below
select date_format(trans_date,'%Y-%m') as month, country, count(state) as trans_count,
sum(if(state="approved",1,0)) as approved_count,sum(amount) as trans_total_amount,
sum(if(state="approved",amount,0)) as approved_total_amount from transactions
group by date_format(trans_date,'%Y-%m'), country
==================================================================================
immediate food delivery
# Write your MySQL query statement below
with ok as (select *, row_number() over (partition by customer_id order by order_date) as 'rn'
, (case when order_date = customer_pref_delivery_date then 1.0 else 0 end) as 'immediate'
from Delivery)

select round(100*sum(immediate)/count(immediate),2) as 'immediate_percentage'
from ok
where rn=1
==================================================================================
product sales analysis:
# Write your MySQL query statement below
select product_id,year as first_year,quantity,price from(
select product_id,year,quantity,price,dense_rank() over(partition by product_id order by year) as rn from sales
)a where a.rn=1
==================================================================================
customer bought all products:
# Write your MySQL query statement below
select customer_id from customer 
group by 
customer_id
having count(distinct product_key ) = (select count(product_key ) from product)
==================================================================================
consecutive numbers:
# Write your MySQL query statement below
with c as
(
select id,num,lead(num) over(order by id) as a,lag(num) over(order by id) as b
from Logs
)
select distinct num as ConsecutiveNums from c where num = a and num = b
==================================================================================
product price at given date:
# Write your MySQL query statement below
select distinct a.product_id, coalesce(b.new_price, 10) as price from Products as a
left join
(select product_id, rank() over(partition by product_id order by change_date DESC) as xrank, new_price from Products
where change_date<='2019-08-16') as b
on a.product_id=b.product_id and b.xrank=1
order by 2 DESC;
==================================================================================
last person to fit in bus:
# Write your MySQL query statement below
select person_name from(
select person_name,sum(weight) over(order by turn) as total from queue
)a where a.total <=1000 order by a.total desc limit 1
==================================================================================
# Write your MySQL query statement below
Select c.visited_on, sum(t.amount) as amount , ROUND((sum(t.amount)/7),2)as average_amount
from (Select visited_on, sum(amount) as amount
from Customer group by visited_on ) as c, (Select visited_on, sum(amount) as amount
from Customer group by visited_on ) as t
where c.visited_on>=t.visited_on and DATEDIFF(c.visited_on,t.visited_on)<=6
group by c.visited_on having count(distinct t.visited_on)=7

==================================================================================
salary categories:
# Write your MySQL query statement below
select "Low Salary" as category, sum(if(income<20000,1,0)) as accounts_count from Accounts
union
select "Average Salary" as category, sum(if(income>=20000 and income<=50000,1,0)) as accounts_count from Accounts
union
select "High Salary" as category, sum(if(income>50000,1,0)) as accounts_count from Accounts

==================================================================================
